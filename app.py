from flask import Flask, render_template, jsonify, request
from flask_compress import Compress
from dotenv import load_dotenv
from flask import send_from_directory
import os
from datetime import datetime
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def create_app():
    app = Flask(__name__)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'cyberguardian-super-secret-2024')
    app.config['TEMPLATES_AUTO_RELOAD'] = True
    app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///cyberguardian.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SESSION_TYPE'] = 'filesystem'
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∂–∞—Ç–∏–µ GZIP
    app.config['COMPRESS_ALGORITHM'] = 'gzip'
    app.config['COMPRESS_LEVEL'] = 6
    app.config['COMPRESS_MIN_SIZE'] = 500
    Compress(app)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database import db
    db.init_app(app)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Login
    from auth.routes import init_login_manager
    init_login_manager(app)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprint'—ã
    from auth.routes import auth_bp
    from education.routes import education_bp
    from passwords.routes import passwords_bp
    from encryption.routes import encryption_bp
    from ai_assistant.routes import ai_bp
    from threat_monitor.routes import threat_bp
    from security_scanner.routes import scanner_bp
    from cyber_games.routes import games_bp
    from templates.simulators.routes import simulators_bp
    from ddos_simulator.routes import ddos_bp
    
    app.register_blueprint(auth_bp, url_prefix='/auth')
    app.register_blueprint(education_bp, url_prefix='/education')
    app.register_blueprint(passwords_bp, url_prefix='/passwords')
    app.register_blueprint(encryption_bp, url_prefix='/encryption')
    app.register_blueprint(ai_bp, url_prefix='/ai')
    app.register_blueprint(threat_bp, url_prefix='/threats')
    app.register_blueprint(scanner_bp, url_prefix='/scanner')
    app.register_blueprint(games_bp, url_prefix='/games')
    app.register_blueprint(simulators_bp, url_prefix='/simulators')
    app.register_blueprint(ddos_bp, url_prefix='/ddos')

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    @app.context_processor
    def inject_global_vars():
        return {
            'current_year': datetime.now().year,
            'app_name': 'CyberGuardian',
            'app_version': '2.0.0',
            'user_count': 1500,
            'lessons_completed': 12500
        }
    
    # –ì–ª–∞–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    @app.route('/')
    def index():
        return render_template('index.html')
    
    @app.route('/yandex_e8719664d2590c4e.html')
    def yandex_verify():
        return send_from_directory('static', 'yandex_e8719664d2590c4e.html')
    
    @app.route('/health')
    def health_check():
        return jsonify({
            'status': 'healthy', 
            'timestamp': datetime.now().isoformat(),
            'version': '2.0.0',
            'services': ['auth', 'education', 'encryption', 'ai', 'threats', 'scanner', 'games']
        })
    
    @app.route('/about')
    def about():
        return render_template('about.html')
    
    @app.route('/contact')
    def contact():
        return render_template('contact.html')
    
    @app.route('/dashboard')
    def dashboard():
        return render_template('dashboard.html')
    
    # API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    @app.route('/api/stats')
    def get_stats():
        return jsonify({
            'users_online': 47,
            'active_threats': 3,
            'lessons_today': 128,
            'encryptions_today': 89,
            'ai_questions': 56
        })
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫
    @app.errorhandler(404)
    def not_found(error):
        return render_template('404.html'), 404
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫
    @app.errorhandler(500)
    def internal_error(error):
        return render_template('500.html'), 500
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
    @app.after_request
    def add_cache_headers(response):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º request.path –≤–º–µ—Å—Ç–æ response.request.path
        if 'static' in request.path:
            response.headers['Cache-Control'] = 'public, max-age=31536000'
        # HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
        elif response.content_type and 'text/html' in response.content_type:
            response.headers['Cache-Control'] = 'public, max-age=300'
        # API –æ—Ç–≤–µ—Ç—ã - –∫—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        elif response.content_type and 'application/json' in response.content_type:
            response.headers['Cache-Control'] = 'public, max-age=30'
        
        return response
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    with app.app_context():
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            from auth.models import User
            from education.models import UserProgress
            from encryption.models import EncryptionHistory
            
            db.create_all()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üîÑ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...")
            create_demo_data()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    return app

def create_demo_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    from database import db
    from auth.models import User
    from education.models import UserProgress
    from encryption.models import EncryptionHistory
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if User.query.count() == 0:
            demo_user = User(
                username='demo',
                email='demo@cyberguardian.ru',
                password_hash='pbkdf2:sha256:260000$abc123$def456'
            )
            demo_user.set_password('demo123')  # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
            db.session.add(demo_user)
            db.session.commit()
            print("üë§ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: demo / demo123")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            demo_history = EncryptionHistory(
                user_id=demo_user.id,
                operation_type='encrypt',
                algorithm='AES',
                original_text='Hello CyberGuardian!',
                processed_text='U2FsdGVkX1+2w6L8JcKc6w=='
            )
            db.session.add(demo_history)
            db.session.commit()
            print("üìù –î–µ–º–æ-–∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()

if __name__ == '__main__':
    print("üöÄ CyberGuardian 2.0 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üéØ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: Threat Monitor, Security Scanner, Cyber Games!")
    print("‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–∫–ª—é—á–µ–Ω–æ GZIP —Å–∂–∞—Ç–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5000")
    print("üîß Health check: http://localhost:5000/health")
    print("=" * 60)
    app.run(debug=True, host='0.0.0.0', port=5000)