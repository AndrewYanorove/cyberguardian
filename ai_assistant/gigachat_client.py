# gigachat_client.py
import os
import requests
import time
import json
import hashlib
from typing import Optional, Dict

requests.packages.urllib3.disable_warnings()

class OptimizedGigaChatClient:
    def __init__(self):
        self.auth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        self.api_url = "https://gigachat.devices.sberbank.ru/api/v1"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç)
        self.access_token = "-"
        
        # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥), —Å—Ç–∞–≤–∏–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        self.token_expires_at = time.time() + 1800 - 300  # -5 –º–∏–Ω—É—Ç –∑–∞–ø–∞—Å–∞
        
        # –í–∞—à–∏ credentials –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
        self.authorization_key = "MDE5OWNmNGUtZDc0Mi03NmNlLTljNDUtNDYwNTEzNDRhZTljOjhmYzUwMjgwLWMzZmMtNGUyOS1hMDhjLTIyOGY3MTQyZTEyNA=="
        self.rq_uid = "f96baca0-307d-44e3-9834-ab3bc45a2ebb"
        
        # –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        self.response_cache: Dict[str, dict] = {}
        self.cache_duration = 3600  # 1 —á–∞—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats = {
            'total_requests': 0,
            'cached_responses': 0,
            'token_refreshes': 0,
            'tokens_used': 0
        }
        
        print("‚úÖ GigaChat: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
    
    def _refresh_token_if_needed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫"""
        if time.time() >= self.token_expires_at:
            print("üîÑ GigaChat: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            self._authenticate()
    
    def _authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ GigaChat (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"""
        try:
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
                'RqUID': self.rq_uid,
                'Authorization': f'Basic {self.authorization_key}'
            }
            
            payload = {'scope': 'GIGACHAT_API_PERS'}
            
            response = requests.post(
                self.auth_url,
                headers=headers,
                data=payload,
                verify=False,
                timeout=30
            )
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data['access_token']
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å –∑–∞–ø–∞—Å–æ–º –≤ 5 –º–∏–Ω—É—Ç
                self.token_expires_at = time.time() + token_data['expires_in'] - 300
                self.usage_stats['token_refreshes'] += 1
                print("‚úÖ GigaChat: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå GigaChat: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                self.access_token = None
                
        except Exception as e:
            print(f"‚ùå GigaChat: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
            self.access_token = None
    
    def _get_cache_key(self, message: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        normalized_msg = ' '.join(message.lower().split())
        return hashlib.md5(normalized_msg.encode()).hexdigest()
    
    def _get_cached_response(self, message: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        cache_key = self._get_cache_key(message)
        
        if cache_key in self.response_cache:
            cache_data = self.response_cache[cache_key]
            if time.time() - cache_data['timestamp'] < self.cache_duration:
                self.usage_stats['cached_responses'] += 1
                return cache_data['response']
        
        return None
    
    def _cache_response(self, message: str, response: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫—ç—à"""
        cache_key = self._get_cache_key(message)
        self.response_cache[cache_key] = {
            'response': response,
            'timestamp': time.time(),
            'message': message
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.response_cache) > 1000:
            oldest_key = min(self.response_cache.keys(), 
                           key=lambda k: self.response_cache[k]['timestamp'])
            del self.response_cache[oldest_key]
    
    def _optimize_prompt(self, message: str) -> tuple[str, int]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        quick_responses = {
            "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø GigaChat –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö, –ø–∞—Ä–æ–ª—è—Ö, —Ñ–∏—à–∏–Ω–≥–µ –∏ —Ç.–¥.",
            "–∫–∞–∫ –¥–µ–ª–∞": "ü§ñ –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            "—Å–ø–∞—Å–∏–±–æ": "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            "–ø–æ–∫–∞": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ —Å–µ—Ç–∏!",
        }
        
        msg_lower = message.lower().strip()
        
        for key in quick_responses:
            if key in msg_lower:
                return quick_responses[key], 0
        
        optimized_system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. 
        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."""
        
        return optimized_system_prompt, 1
    
    def get_response(self, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–æ–≤"""
        self.usage_stats['total_requests'] += 1
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_response = self._get_cached_response(message)
        if cached_response:
            return cached_response
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        quick_response, needs_api = self._optimize_prompt(message)
        if not needs_api:
            self._cache_response(message, quick_response)
            return quick_response
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω API –≤—ã–∑–æ–≤
        self._refresh_token_if_needed()
        
        if not self.access_token:
            return self._get_demo_response(message)
        
        try:
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {self.access_token}'
            }
            
            system_prompt, _ = self._optimize_prompt(message)
            
            payload = {
                "model": "GigaChat",
                "messages": [
                    {
                        "role": "system",
                        "content": system_prompt
                    },
                    {
                        "role": "user", 
                        "content": message
                    }
                ],
                "max_tokens": 400,
                "temperature": 0.7
            }
            
            response = requests.post(
                f"{self.api_url}/chat/completions",
                headers=headers,
                json=payload,
                verify=False,
                timeout=20
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._cache_response(message, ai_response)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
                if 'usage' in result:
                    self.usage_stats['tokens_used'] += result['usage'].get('total_tokens', 0)
                
                return ai_response
            else:
                print(f"‚ùå GigaChat API error: {response.status_code} - {response.text}")
                demo_response = self._get_demo_response(message)
                self._cache_response(message, demo_response)
                return demo_response
                
        except Exception as e:
            print(f"‚ùå GigaChat request error: {e}")
            demo_response = self._get_demo_response(message)
            self._cache_response(message, demo_response)
            return demo_response
    
    def _get_demo_response(self, message: str) -> str:
        """–î–µ–º–æ-–æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ GigaChat –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"""
        demo_responses = {
            "–ø–∞—Ä–æ–ª—å": "üîê **–ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å:**\n‚Ä¢ 12+ —Å–∏–º–≤–æ–ª–æ–≤\n‚Ä¢ –ë—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏\n‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π\n‚Ä¢ 2FA",
            "—Ñ–∏—à–∏–Ω–≥": "üé£ **–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞:**\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n‚Ä¢ –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º\n‚Ä¢ –í–Ω–∏–º–∞–Ω–∏–µ –∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ\n‚Ä¢ –ê–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
            "wifi": "üì° **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Wi-Fi:**\n‚Ä¢ WPA3 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ä–æ—É—Ç–µ—Ä–∞\n‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ WPS\n‚Ä¢ –°–∫—Ä—ã—Ç—ã–π SSID",
            "–∞–Ω—Ç–∏–≤–∏—Ä—É—Å": "üõ°Ô∏è **–ê–Ω—Ç–∏–≤–∏—Ä—É—Å—ã:**\n‚Ä¢ Windows Defender\n‚Ä¢ Kaspersky/ESET\n‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "–≤–∑–ª–æ–º": "üö® **–ï—Å–ª–∏ –≤–∑–ª–æ–º–∞–ª–∏:**\n‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏\n‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ 2FA\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            "vpn": "üîí **VPN:**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–µ—Ç–µ–π\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ no-log –ø–æ–ª–∏—Ç–∏–∫—É\n‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö VPN",
        }
        
        msg_lower = message.lower()
        for key in demo_responses:
            if key in msg_lower:
                return demo_responses[key]
        
        return "ü§ñ GigaChat –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°–ø—Ä–æ—Å–∏—Ç–µ –æ:\n‚Ä¢ –ü–∞—Ä–æ–ª—è—Ö\n‚Ä¢ –§–∏—à–∏–Ω–≥–µ\n‚Ä¢ Wi-Fi\n‚Ä¢ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å–∞—Ö\n‚Ä¢ VPN\n‚Ä¢ –í–∑–ª–æ–º–µ"
    
    def get_usage_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            **self.usage_stats,
            'cache_size': len(self.response_cache),
            'cache_hit_rate': round(
                (self.usage_stats['cached_responses'] / self.usage_stats['total_requests'] * 100) 
                if self.usage_stats['total_requests'] > 0 else 0, 
                1
            ),
            'token_expires_in': max(0, int(self.token_expires_at - time.time()))
        }
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.response_cache.clear()
        print("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
gigachat_client = OptimizedGigaChatClient()