import re
import html
from typing import Dict, Any

class SecurityUtils:
    @staticmethod
    def sanitize_input(text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not text:
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        text = html.escape(text)
        text = re.sub(r'<script.*?>.*?</script>', '', text, flags=re.IGNORECASE)
        text = re.sub(r'on\w+=\s*".*?"', '', text)
        
        return text.strip()
    
    @staticmethod
    def detect_question_complexity(question: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        question_lower = question.lower()
        
        expert_keywords = ['apt', 'zero-day', 'siem', 'soar', 'ids/ips', 'soc', 'ndr', 'edr']
        advanced_keywords = ['firewall', 'vpn', 'encryption', 'malware', 'ransomware', 'ddos']
        
        if any(keyword in question_lower for keyword in expert_keywords):
            return "expert"
        elif any(keyword in question_lower for keyword in advanced_keywords):
            return "advanced"
        else:
            return "basic"

class ResponseFormatter:
    @staticmethod
    def format_ai_response(text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ —ç–º–æ–¥–∑–∏
        replacements = {
            '‚Ä¢': '‚Ä¢',
            '**': '<strong>',
            '__': '<strong>',
            '\n-': '\n‚Ä¢',
            '\n*': '\n‚Ä¢',
        }
        
        for old, new in replacements.items():
            text = text.replace(old, new)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
        lines = text.split('\n')
        formatted_lines = []
        
        for line in lines:
            if line.strip().startswith('‚Ä¢'):
                formatted_lines.append(f'<div class="list-item">{line}</div>')
            elif line.strip().startswith('üîê') or line.strip().startswith('üé£') or line.strip().startswith('üì°'):
                formatted_lines.append(f'<div class="section-title">{line}</div>')
            else:
                formatted_lines.append(line)
        
        return '\n'.join(formatted_lines)