from flask import Blueprint, render_template, request, jsonify, session
from flask_login import login_required, current_user
import random
import time
from datetime import datetime

simulators_bp = Blueprint('simulators', __name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏—à–∏–Ω–≥-–ø–∏—Å–µ–º
PHISHING_EMAILS = [
    {
        'id': 1,
        'sender': 'security@bank-ru.com',
        'subject': '–°–†–û–ß–ù–û: –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        'body': '''
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
            <p>–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç,</p>
            <p>–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ. 
            –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:</p>
            <p style="text-align: center; margin: 2rem 0;">
                <a href="http://bank-security.ru/verify" style="background: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                    –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢
                </a>
            </p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</p>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ë–∞–Ω–∫–∞</p>
        </div>
        ''',
        'is_phishing': True,
        'explanation': 'üî¥ –§–ò–®–ò–ù–ì: –ü–æ–¥–¥–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω bank-ru.com, —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç–∏, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç'
    },
    {
        'id': 2,
        'sender': 'noreply@yandex.ru',
        'subject': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        'body': '''
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,</p>
            <p>–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ø–Ω–¥–µ–∫—Å. 
            –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –º–æ–∂–Ω–æ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:</p>
            <p style="text-align: center; margin: 2rem 0;">
                <a href="https://yandex.ru/legal/confidential" style="color: #0066cc; text-decoration: none;">
                    https://yandex.ru/legal/confidential
                </a>
            </p>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –Ø–Ω–¥–µ–∫—Å</p>
        </div>
        ''',
        'is_phishing': False,
        'explanation': 'üü¢ –õ–ï–ì–ò–¢–ò–ú–ù–û: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –Ø–Ω–¥–µ–∫—Å, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞'
    },
    {
        'id': 3,
        'sender': 'support@paypal-security.com',
        'subject': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
        'body': '''
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
            <p>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PayPal,</p>
            <p>–ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º. 
            –î–ª—è –∑–∞—â–∏—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</p>
            <p style="text-align: center; margin: 2rem 0;">
                <a href="http://paypal-secure-verify.com/login" style="background: #0070ba; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                    –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ü–õ–ê–¢–ï–ñ
                </a>
            </p>
            <p>–ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.</p>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ PayPal</p>
        </div>
        ''',
        'is_phishing': True,
        'explanation': 'üî¥ –§–ò–®–ò–ù–ì: –ü–æ–¥–¥–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω paypal-security.com, –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –¥–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é'
    }
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏
SOCIAL_ENGINEERING_SCENARIOS = [
    {
        'id': 1,
        'title': '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∏–∑ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        'scenario': '''
        <div class="scenario-content">
            <p><strong>–°–∏—Ç—É–∞—Ü–∏—è:</strong> –í–∞–º –∑–≤–æ–Ω–∏—Ç —á–µ–ª–æ–≤–µ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞.</p>
            <div class="dialogue">
                <div class="message incoming">
                    <strong>–û–ø–µ—Ä–∞—Ç–æ—Ä:</strong> –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ë–∞–Ω–∫–∞. –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ–π.
                </div>
                <div class="message outgoing">
                    <strong>–í—ã:</strong> –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–∏?
                </div>
                <div class="message incoming">
                    <strong>–û–ø–µ—Ä–∞—Ç–æ—Ä:</strong> –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Å—É–º–º—É 50,000 —Ä—É–±–ª–µ–π. –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ –∏–∑ SMS.
                </div>
            </div>
            <p><strong>–í–æ–ø—Ä–æ—Å:</strong> –ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ?</p>
        </div>
        ''',
        'options': [
            '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∫–æ–¥ –∏–∑ SMS –¥–ª—è –∑–∞—â–∏—Ç—ã —Å—á–µ—Ç–∞',
            '–û—Ç–∫–∞–∂—É—Å—å –∏ –ø–µ—Ä–µ–∑–≤–æ–Ω—é –≤ –±–∞–Ω–∫ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É',
            '–ü–æ–ø—Ä–æ—à—É –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö'
        ],
        'correct_answer': 1,
        'explanation': '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –∫–æ–¥—ã –∏–∑ SMS. –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–≤–∞–Ω–∏–≤–∞–π—Ç–µ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.'
    }
]

@simulators_bp.route('/')
@login_required
def simulators_home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤"""
    return render_template('simulators/home.html')

@simulators_bp.route('/phishing')
@login_required
def phishing_simulator():
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Ñ–∏—à–∏–Ω–≥–∞"""
    progress = session.get('phishing_progress', {
        'level': 1,
        'score': 0,
        'correct': 0,
        'total': 0
    })
    
    # –ü–æ–ª—É—á–∞–µ–º email –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    email_data = next((e for e in PHISHING_EMAILS if e['id'] == progress['level']), PHISHING_EMAILS[0])
    
    return render_template('simulators/phishing.html',
                         level=progress['level'],
                         score=progress['score'],
                         correct=progress['correct'],
                         total=progress['total'],
                         total_levels=len(PHISHING_EMAILS),
                         email=email_data)

@simulators_bp.route('/check-phishing', methods=['POST'])
@login_required
def check_phishing():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∏—à–∏–Ω–≥ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ"""
    data = request.get_json()
    user_answer = data.get('answer')
    level = data.get('level', 1)
    
    # –ù–∞—Ö–æ–¥–∏–º email –¥–ª—è —É—Ä–æ–≤–Ω—è
    email_data = next((e for e in PHISHING_EMAILS if e['id'] == level), PHISHING_EMAILS[0])
    is_correct = user_answer == email_data['is_phishing']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = session.get('phishing_progress', {
        'level': 1,
        'score': 0,
        'correct': 0,
        'total': 0
    })
    
    progress['total'] += 1
    if is_correct:
        progress['score'] += 10
        progress['correct'] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    if is_correct and level < len(PHISHING_EMAILS):
        progress['level'] += 1
    
    session['phishing_progress'] = progress
    
    return jsonify({
        'correct': is_correct,
        'explanation': email_data['explanation'],
        'progress': progress
    })

@simulators_bp.route('/password-cracker')
@login_required
def password_cracker():
    """–°–∏–º—É–ª—è—Ç–æ—Ä –≤–∑–ª–æ–º–∞ –ø–∞—Ä–æ–ª–µ–π"""
    return render_template('simulators/password_cracker.html')

@simulators_bp.route('/network-scanner')
@login_required
def network_scanner():
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return render_template('simulators/network_scanner.html')

@simulators_bp.route('/social-engineering')
@login_required
def social_engineering():
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏"""
    progress = session.get('social_progress', {
        'level': 1,
        'score': 0,
        'correct': 0,
        'total': 0
    })
    
    scenario = next((s for s in SOCIAL_ENGINEERING_SCENARIOS if s['id'] == progress['level']), SOCIAL_ENGINEERING_SCENARIOS[0])
    
    return render_template('simulators/social_engineering.html',
                         level=progress['level'],
                         score=progress['score'],
                         scenario=scenario)

@simulators_bp.route('/check-social', methods=['POST'])
@login_required
def check_social():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏"""
    data = request.get_json()
    user_answer = data.get('answer')
    level = data.get('level', 1)
    
    scenario = next((s for s in SOCIAL_ENGINEERING_SCENARIOS if s['id'] == level), SOCIAL_ENGINEERING_SCENARIOS[0])
    is_correct = int(user_answer) == scenario['correct_answer']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = session.get('social_progress', {
        'level': 1,
        'score': 0,
        'correct': 0,
        'total': 0
    })
    
    progress['total'] += 1
    if is_correct:
        progress['score'] += 15
        progress['correct'] += 1
        progress['level'] = min(progress['level'] + 1, len(SOCIAL_ENGINEERING_SCENARIOS))
    
    session['social_progress'] = progress
    
    return jsonify({
        'correct': is_correct,
        'explanation': scenario['explanation'],
        'progress': progress
    })

@simulators_bp.route('/api/crack-password', methods=['POST'])
@login_required
def crack_password():
    """–°–∏–º—É–ª—è—Ü–∏—è –≤–∑–ª–æ–º–∞ –ø–∞—Ä–æ–ª—è"""
    data = request.get_json()
    password = data.get('password', '')
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞
    strength = calculate_password_strength(password)
    crack_time = simulate_crack_time(strength, len(password))
    
    return jsonify({
        'strength': strength,
        'crack_time': crack_time,
        'message': get_crack_message(strength),
        'recommendation': get_recommendation(strength)
    })

@simulators_bp.route('/api/scan-network', methods=['POST'])
@login_required
def scan_network():
    """–°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = request.get_json()
    target = data.get('target', '192.168.1.1')
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    ports = [
        {'port': 22, 'service': 'SSH', 'status': 'open', 'vulnerability': 'Medium'},
        {'port': 80, 'service': 'HTTP', 'status': 'open', 'vulnerability': 'Low'},
        {'port': 443, 'service': 'HTTPS', 'status': 'open', 'vulnerability': 'Low'},
        {'port': 3389, 'service': 'RDP', 'status': 'open', 'vulnerability': 'High'},
        {'port': 21, 'service': 'FTP', 'status': 'closed', 'vulnerability': 'None'},
    ]
    
    return jsonify({
        'target': target,
        'ports_found': len([p for p in ports if p['status'] == 'open']),
        'ports': ports,
        'recommendations': [
            '–ó–∞–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç 3389 (RDP) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN',
            '–û–±–Ω–æ–≤–∏—Ç–µ SSH –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏',
            '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞'
        ]
    })

def calculate_password_strength(password):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
    score = 0
    if len(password) >= 8: score += 1
    if len(password) >= 12: score += 1
    if any(c.islower() for c in password): score += 1
    if any(c.isupper() for c in password): score += 1
    if any(c.isdigit() for c in password): score += 1
    if any(not c.isalnum() for c in password): score += 1
    return min(score, 5)

def simulate_crack_time(strength, length):
    """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤–∑–ª–æ–º–∞"""
    base_time = 0.1
    
    if strength == 1: return base_time * 10      # 1 —Å–µ–∫—É–Ω–¥–∞
    elif strength == 2: return base_time * 60    # 6 —Å–µ–∫—É–Ω–¥
    elif strength == 3: return base_time * 600   # 1 –º–∏–Ω—É—Ç–∞
    elif strength == 4: return base_time * 3600  # 1 —á–∞—Å
    else: return base_time * 86400              # 1 –¥–µ–Ω—å

def get_crack_message(strength):
    messages = {
        1: "üíÄ –í–ó–õ–û–ú–ê–ù–û –ú–ì–ù–û–í–ï–ù–ù–û! –ü–∞—Ä–æ–ª—å –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π",
        2: "üî• –í–ó–õ–û–ú–ê–ù–û –ó–ê –°–ï–ö–£–ù–î–´! –ù–µ–Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å", 
        3: "‚ö†Ô∏è –í–ó–õ–û–ú –ó–ê –ú–ò–ù–£–¢–´! –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å",
        4: "üõ°Ô∏è –í–ó–õ–û–ú –ó–ê –ß–ê–°–´! –•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å",
        5: "üîí –í–ó–õ–û–ú –ó–ê –î–ù–ò! –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å"
    }
    return messages.get(strength, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")

def get_recommendation(strength):
    recommendations = {
        1: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π 12+ —Å–∏–º–≤–æ–ª–æ–≤ —Å –±—É–∫–≤–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
        2: "–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
        3: "–£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –¥–æ 16+ —Å–∏–º–≤–æ–ª–æ–≤",
        4: "–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏",
        5: "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    }
    return recommendations.get(strength, "")