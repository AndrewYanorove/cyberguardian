# encryption/services.py
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from datetime import datetime
import base64
import os

class EncryptionService:
    @staticmethod
    def derive_key(password: str, salt: bytes = None) -> tuple:
        if salt is None:
            salt = os.urandom(16)
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return key, salt

    @staticmethod
    def encrypt_aes(text: str, password: str) -> dict:
        salt = os.urandom(16)
        key, salt = EncryptionService.derive_key(password, salt)
        fernet = Fernet(key)
        
        encrypted = fernet.encrypt(text.encode())
        return {
            'encrypted_text': base64.urlsafe_b64encode(encrypted).decode(),
            'salt': base64.urlsafe_b64encode(salt).decode()
        }

    @staticmethod
    def decrypt_aes(encrypted_text: str, password: str, salt: str) -> str:
        try:
            salt = base64.urlsafe_b64decode(salt.encode())
            encrypted = base64.urlsafe_b64decode(encrypted_text.encode())
            
            key, _ = EncryptionService.derive_key(password, salt)
            fernet = Fernet(key)
            
            decrypted = fernet.decrypt(encrypted)
            return decrypted.decode()
        except Exception:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    @staticmethod
    def caesar_cipher(text: str, shift: int, encrypt: bool = True) -> str:
        result = []
        for char in text:
            if char.isalpha():
                shift_base = 65 if char.isupper() else 97
                shifted = (ord(char) - shift_base + (shift if encrypt else -shift)) % 26
                result.append(chr(shifted + shift_base))
            else:
                result.append(char)
        return ''.join(result)

    @staticmethod
    def xor_cipher(text: str, key: str) -> str:
        result = []
        key_length = len(key)
        for i, char in enumerate(text):
            result.append(chr(ord(char) ^ ord(key[i % key_length])))
        return ''.join(result)
    @staticmethod
    def obfuscate_metadata(encrypted_text: str, algorithm: str, salt: str = '') -> str:
        """–°–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ"""
        import hashlib
        import base64
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        markers = {
            'AES': 'f1a2',      # –°–ª—É—á–∞–π–Ω—ã–µ hex-–º–µ—Ç–∫–∏
            'Caesar': 'c3b4', 
            'XOR': 'x5y6'
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –∫–æ–¥
        algo_code = markers.get(algorithm.split(' ')[0], 'u7v8')
        
        # –î–ª—è Caesar –∏–∑–≤–ª–µ–∫–∞–µ–º shift
        if algorithm.startswith('Caesar'):
            shift = algorithm.split('shift ')[1].split(')')[0]
            algo_code += f"s{shift.zfill(2)}"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        data_string = f"{algo_code}:{salt}:{encrypted_text}" if salt else f"{algo_code}::{encrypted_text}"
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        obfuscated = base64.b85encode(data_string.encode()).decode()
        
        return obfuscated
    
    @staticmethod
    def deobfuscate_metadata(obfuscated_text: str) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        import base64
        
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base85
            decoded = base64.b85decode(obfuscated_text.encode()).decode()
            parts = decoded.split(':', 2)
            
            if len(parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            
            algo_code, salt, encrypted_text = parts
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ –∫–æ–¥—É
            markers = {
                'f1a2': 'AES',
                'c3b4': 'Caesar', 
                'x5y6': 'XOR'
            }
            
            algorithm_base = markers.get(algo_code[:4], 'Unknown')
            
            # –î–ª—è Caesar –∏–∑–≤–ª–µ–∫–∞–µ–º shift –∏–∑ –∫–æ–¥–∞
            if algorithm_base == 'Caesar' and len(algo_code) > 4:
                shift = int(algo_code[4:])
                algorithm = f'Caesar (shift {shift})'
            else:
                algorithm = algorithm_base
            
            # –ï—Å–ª–∏ —Å–æ–ª—å –ø—É—Å—Ç–∞—è, —É–±–∏—Ä–∞–µ–º –µ–µ
            salt = salt if salt else ''
            
            return encrypted_text, algorithm, salt
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {str(e)}")
    
    @staticmethod
    def create_stealth_file(encrypted_text: str, algorithm: str, salt: str = '', original_filename: str = "document.txt") -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        import random
        
        # –û–±—Ñ—É—Å—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        obfuscated = EncryptionService.obfuscate_metadata(encrypted_text, algorithm, salt)
        
        # –°–æ–∑–¥–∞–µ–º "–ø—Ä–∏–∫—Ä—ã—Ç–∏–µ" - —Ñ–∞–π–ª –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        stealth_content = f"""
# –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π
# Document: {original_filename}
# Created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# 
# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:

{''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=') for _ in range(50))}
{obfuscated}
{''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=') for _ in range(50))}

# –ö–æ–Ω–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """.strip()
        
        return stealth_content.encode('utf-8')
    
    @staticmethod
    def extract_from_stealth_file(file_content: bytes) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ stealth-—Ñ–∞–π–ª–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            content = file_content.decode('utf-8')
            lines = content.split('\n')
        
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª, —Å—Ç—Ä–æ–∫: {len(lines)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            for i, line in enumerate(lines):
                line = line.strip()
                # Base85 —Å—Ç—Ä–æ–∫–∞ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
                if len(line) > 50:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                    print(f"üìÑ –°—Ç—Ä–æ–∫–∞ {i}: {line[:50]}...")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                
                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    try:
                        encrypted_text, algorithm, salt = EncryptionService.deobfuscate_metadata(line)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –∞–ª–≥–æ—Ä–∏—Ç–º={algorithm}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        return encrypted_text, algorithm, salt
                    except Exception as e:
                        print(f"‚ùå –ù–µ –ø–æ–¥–æ—à–ª–∞ —Å—Ç—Ä–æ–∫–∞ {i}: {str(e)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
            print("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º...")
            full_text = content
            if 'f1a2:' in full_text or 'c3b4:' in full_text or 'x5y6:' in full_text:
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ base85 –¥–∞–Ω–Ω—ã—Ö
                import re
                base85_pattern = r'([0-9A-Za-z!@#$%^&*()_+\-=\[\]{}|;:,.<>?/]{50,})'
                matches = re.findall(base85_pattern, full_text)
            
                for match in matches:
                    try:
                        encrypted_text, algorithm, salt = EncryptionService.deobfuscate_metadata(match)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ regex: –∞–ª–≥–æ—Ä–∏—Ç–º={algorithm}")
                        return encrypted_text, algorithm, salt
                    except:
                        continue
        
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ")
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stealth-—Ñ–∞–π–ª–∞: {str(e)}")