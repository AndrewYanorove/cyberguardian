from flask import Blueprint, render_template, jsonify, request
from flask_login import login_required
import random
import time
import re
import requests
import hashlib
import socket
from urllib.parse import urlparse
import subprocess
import platform
import datetime

scanner_bp = Blueprint('scanner', __name__)

class SecurityScanner:
    @staticmethod
    def scan_password_strength(password):
        """–†–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        if not password:
            return {'error': '–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}
        
        score = 0
        feedback = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        length = len(password)
        if length >= 16:
            score += 25
            feedback.append("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è")
        elif length >= 12:
            score += 20
            feedback.append("‚úÖ –•–æ—Ä–æ—à–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è")
        elif length >= 8:
            score += 10
            feedback.append("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª–∏–Ω–Ω–µ–µ")
        else:
            score += 0
            feedback.append("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
        has_upper = re.search(r'[A-Z–ê-–Ø]', password)
        has_lower = re.search(r'[a-z–∞-—è]', password)
        has_digit = re.search(r'\d', password)
        has_special = re.search(r'[!@#$%^&*(),.?":{}|<>\[\]\\/]', password)
        
        char_types = sum([bool(has_upper), bool(has_lower), bool(has_digit), bool(has_special)])
        
        if char_types == 4:
            score += 30
            feedback.append("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤")
        elif char_types == 3:
            score += 20
            feedback.append("‚úÖ –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤")
        elif char_types == 2:
            score += 10
            feedback.append("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            score += 0
            feedback.append("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if re.search(r'(.)\1{2,}', password):
            score -= 15
            feedback.append("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã")
        
        if re.search(r'(123|234|345|456|567|678|789|qwe|wer|ert|rty|tyu|yui|uio|iop|asd|sdf|dfg|fgh|ghj|hjk|jkl|zxc|xcv|cvb|vbn|bnm)', password.lower()):
            score -= 20
            feedback.append("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ common passwords (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        common_passwords = [
            '123456', 'password', '12345678', 'qwerty', '123456789', '12345', 
            '1234', '111111', '1234567', 'dragon', '123123', 'baseball', 
            'abc123', 'football', 'monkey', 'letmein', '696969', 'shadow',
            'master', '666666', 'qwertyuiop', '123321', 'mustang', '1234567890',
            'michael', '654321', 'superman', '1qaz2wsx', '7777777', 'fuckyou',
            '121212', '000000', 'qazwsx', '123qwe', 'killer', 'trustno1',
            'jordan', 'jennifer', 'zxcvbnm', 'asdfgh', 'hunter', 'buster',
            'soccer', 'harley', 'batman', 'andrew', 'tigger', 'sunshine',
            'iloveyou', 'fuckme', '2000', 'charlie', 'robert', 'thomas',
            'hockey', 'ranger', 'daniel', 'starwars', 'klaster', '112233',
            'george', 'asshole', 'computer', 'michelle', 'jessica', 'pepper',
            '1111', 'zxcvbn', '555555', '11111111', '131313', 'freedom',
            '777777', 'pass', 'fuck', 'maggie', '159753', 'aaaaaa', 'ginger',
            'princess', 'joshua', 'cheese', 'amanda', 'summer', 'love',
            'ashley', '6969', 'nicole', 'chelsea', 'biteme', 'matthew',
            'access', 'yankees', '987654321', 'dallas', 'austin', 'thunder',
            'taylor', 'matrix', 'minecraft', 'admin', 'password1'
        ]
        
        if password.lower() in common_passwords:
            score = 10
            feedback = ["üö® –û–î–ò–ù –ò–ó –°–ê–ú–´–• –ù–ï–ù–ê–î–ï–ñ–ù–´–• –ü–ê–†–û–õ–ï–ô! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ!"]
        
        # –≠–Ω—Ç—Ä–æ–ø–∏—è –ø–∞—Ä–æ–ª—è
        entropy = SecurityScanner.calculate_entropy(password)
        if entropy >= 80:
            score += 25
            feedback.append("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –ø–∞—Ä–æ–ª—è")
        elif entropy >= 60:
            score += 20
            feedback.append("‚úÖ –•–æ—Ä–æ—à–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –ø–∞—Ä–æ–ª—è")
        elif entropy >= 40:
            score += 10
            feedback.append("‚ö†Ô∏è –≠–Ω—Ç—Ä–æ–ø–∏—è –ø–∞—Ä–æ–ª—è –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            score += 0
            feedback.append("‚ùå –ù–∏–∑–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –ø–∞—Ä–æ–ª—è")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ score –æ—Ç 0 –¥–æ 100
        score = max(0, min(100, score))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if score >= 90:
            strength = "–û—Ç–ª–∏—á–Ω–∞—è"
            color = "success"
        elif score >= 75:
            strength = "–•–æ—Ä–æ—à–∞—è"
            color = "info"
        elif score >= 60:
            strength = "–°—Ä–µ–¥–Ω—è—è"
            color = "warning"
        elif score >= 40:
            strength = "–°–ª–∞–±–∞—è"
            color = "danger"
        else:
            strength = "–û—á–µ–Ω—å —Å–ª–∞–±–∞—è"
            color = "dark"
        
        return {
            'score': score,
            'strength': strength,
            'color': color,
            'feedback': feedback,
            'crack_time': SecurityScanner.calculate_crack_time(score, length, char_types),
            'entropy': entropy,
            'length': length,
            'char_types': char_types
        }
    
    @staticmethod
    def calculate_entropy(password):
        """–†–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏ –ø–∞—Ä–æ–ª—è"""
        if not password:
            return 0
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞
        char_set = 0
        if re.search(r'[a-z]', password):
            char_set += 26
        if re.search(r'[A-Z]', password):
            char_set += 26
        if re.search(r'\d', password):
            char_set += 10
        if re.search(r'[^a-zA-Z0-9]', password):
            char_set += 33  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        
        if char_set == 0:
            return 0
            
        entropy = len(password) * (char_set.bit_length())
        return min(100, entropy)
    
    @staticmethod
    def calculate_crack_time(score, length, char_types):
        """–†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞"""
        base_time = 0.001  # –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è
        length_factor = 2 ** (length - 6)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–ª–∏–Ω—ã
        complexity_factor = 10 ** (char_types - 1)  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏–º–≤–æ–ª–æ–≤
        score_factor = (score / 20) ** 3  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ–±—â–µ–≥–æ score
        
        total_time = base_time * length_factor * complexity_factor * score_factor
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if total_time < 1:
            return "–ú–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"
        elif total_time < 60:
            return f"{int(total_time)} —Å–µ–∫—É–Ω–¥"
        elif total_time < 3600:
            return f"{int(total_time/60)} –º–∏–Ω—É—Ç"
        elif total_time < 86400:
            return f"{int(total_time/3600)} —á–∞—Å–æ–≤"
        elif total_time < 31536000:
            return f"{int(total_time/86400)} –¥–Ω–µ–π"
        elif total_time < 315360000:
            return f"{int(total_time/31536000)} –ª–µ—Ç"
        else:
            return "–°–æ—Ç–Ω–∏ –ª–µ—Ç"
    
    @staticmethod
    def scan_email_security(email):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ email (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö DNS –∑–∞–ø—Ä–æ—Å–æ–≤)"""
        if not email or '@' not in email:
            return {'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'}
        
        issues = []
        recommendations = []
        score = 100  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ score
        
        try:
            domain = email.split('@')[-1]
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö DNS –∑–∞–ø—Ä–æ—Å–æ–≤
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, email):
                issues.append("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
                score -= 20
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            secure_providers = ['gmail.com', 'protonmail.com', 'tutanota.com', 'outlook.com', 'yahoo.com']
            medium_providers = ['yandex.ru', 'mail.ru', 'rambler.ru', 'hotmail.com']
            
            if domain in secure_providers:
                recommendations.append("‚úÖ –ù–∞–¥–µ–∂–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
                recommendations.append("‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã SPF/DKIM/DMARC")
            elif domain in medium_providers:
                recommendations.append("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
                recommendations.append("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SPF/DKIM/DMARC")
                score -= 5
            else:
                issues.append("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—á—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
                recommendations.append("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SPF, DKIM –∏ DMARC –∑–∞–ø–∏—Å–∏")
                score -= 10
            
            # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö
            recommendations.extend([
                "–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞"
            ])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
            leaked_domains = ['example.com', 'test.com', 'hacked-domain.com']
            if domain in leaked_domains:
                issues.append("üö® –î–æ–º–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö (—Ç–µ—Å—Ç)")
                score -= 25
                recommendations.append("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –≤–∫–ª—é—á–∏—Ç–µ 2FA")
            
        except Exception as e:
            issues.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
            score -= 20
        
        # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ score
        score = max(0, min(100, score))
        
        return {
            'issues': issues,
            'recommendations': recommendations,
            'score': score,
            'domain': domain
        }
    
    @staticmethod
    def network_scan(target):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not target:
            target = "127.0.0.1"
        
        # –û—á–∏—Å—Ç–∫–∞ target –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        target = target.replace('http://', '').replace('https://', '').split('/')[0]
        
        ports = []
        vulnerabilities = []
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        common_ports = [
            (21, 'FTP', 'high'),
            (22, 'SSH', 'medium'),
            (23, 'Telnet', 'critical'),
            (25, 'SMTP', 'medium'),
            (53, 'DNS', 'medium'),
            (80, 'HTTP', 'low'),
            (110, 'POP3', 'medium'),
            (143, 'IMAP', 'medium'),
            (443, 'HTTPS', 'low'),
            (993, 'IMAPS', 'medium'),
            (995, 'POP3S', 'medium'),
            (1433, 'MSSQL', 'high'),
            (3306, 'MySQL', 'high'),
            (3389, 'RDP', 'critical'),
            (5432, 'PostgreSQL', 'high'),
            (5900, 'VNC', 'critical'),
            (6379, 'Redis', 'high'),
            (27017, 'MongoDB', 'high')
        ]
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        open_ports_count = 0
        for port, service, risk in common_ports:
            try:
                is_open = SecurityScanner.check_port(target, port)
                status = 'open' if is_open else 'closed'
                
                if is_open:
                    open_ports_count += 1
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
                    if risk == 'critical':
                        vulnerabilities.append(f"–û—Ç–∫—Ä—ã—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç {port} ({service})")
                    elif risk == 'high':
                        vulnerabilities.append(f"–û—Ç–∫—Ä—ã—Ç –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –ø–æ—Ä—Ç {port} ({service})")
                
                ports.append({
                    'port': port,
                    'service': service,
                    'status': status,
                    'security': risk if is_open else 'low'
                })
            except Exception as e:
                # –ï—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π
                ports.append({
                    'port': port,
                    'service': service,
                    'status': 'unknown',
                    'security': 'low'
                })
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ score –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_score = max(10, 100 - (open_ports_count * 5))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
        try:
            if SecurityScanner.check_port(target, 3389):  # RDP
                vulnerabilities.append("–û—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç RDP (3389) - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫")
                security_score -= 20
        except:
            pass
            
        try:
            if SecurityScanner.check_port(target, 23):  # Telnet
                vulnerabilities.append("–û—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç Telnet (23) - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫")
                security_score -= 25
        except:
            pass
            
        try:
            if SecurityScanner.check_port(target, 21):  # FTP
                vulnerabilities.append("–û—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç FTP (21) - –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ")
                security_score -= 15
        except:
            pass
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if open_ports_count > 10:
            recommendations.append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ - –∑–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ")
        if any(p['port'] == 80 and p['status'] == 'open' for p in ports) and not any(p['port'] == 443 and p['status'] == 'open' for p in ports):
            recommendations.append("HTTP –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ HTTPS - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL")
        if vulnerabilities:
            recommendations.append("–û–±–Ω–æ–≤–∏—Ç–µ –ü–û –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        recommendations.extend([
            '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤',
            '–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ü–û'
        ])
        
        return {
            'ports': ports,
            'vulnerabilities': vulnerabilities,
            'security_score': max(0, security_score),
            'recommendations': recommendations,
            'target': target,
            'open_ports': open_ports_count
        }
    
    @staticmethod
    def check_port(host, port, timeout=2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å host –≤ IP –∞–¥—Ä–µ—Å
            try:
                ip = socket.gethostbyname(host)
            except socket.gaierror:
                return False
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(timeout)
                result = sock.connect_ex((ip, port))
                return result == 0
        except:
            return False

    @staticmethod
    def quick_system_scan():
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ)"""
        security_issues = []
        recommendations = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            system = platform.system()
            recommendations.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {system}")
            
            # –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                import psutil
                memory_percent = psutil.virtual_memory().percent
                if memory_percent > 90:
                    security_issues.append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏: {memory_percent}%")
            except ImportError:
                # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏)
            python_version = platform.python_version()
            if tuple(map(int, python_version.split('.'))) < (3, 7):
                security_issues.append(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è Python: {python_version}")
                recommendations.append("–û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
            # (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ safety –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
            
        except Exception as e:
            security_issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            '–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–µ –ü–û',
            '–í–∫–ª—é—á–∏—Ç–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä',
            '–î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        ])
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ score
        base_score = 80
        score_deduction = len(security_issues) * 10
        system_security = max(20, base_score - score_deduction)
        
        # –°–µ—Ç–µ–≤–æ–π score (—Å–ª—É—á–∞–π–Ω—ã–π, –Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º)
        network_security = max(30, system_security - random.randint(0, 20))
        
        # Password security (—Å–ª—É—á–∞–π–Ω—ã–π)
        password_security = random.randint(40, 90)
        
        return {
            'system_security': system_security,
            'network_security': network_security,
            'password_security': password_security,
            'threats_found': len(security_issues),
            'security_issues': security_issues,
            'recommendations': recommendations if recommendations else [
                '–°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
                '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ü–û',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π'
            ]
        }

# –ú–∞—Ä—à—Ä—É—Ç—ã
@scanner_bp.route('/')
@login_required
def scanner_dashboard():
    return render_template('security_scanner/dashboard.html')

@scanner_bp.route('/password')
@login_required
def password_scanner():
    return render_template('security_scanner/password.html')

@scanner_bp.route('/email')
@login_required
def email_scanner():
    return render_template('security_scanner/email.html')

@scanner_bp.route('/network')
@login_required
def network_scanner():
    return render_template('security_scanner/network.html')

@scanner_bp.route('/vulnerabilities')
@login_required
def vulnerability_scanner():
    return render_template('security_scanner/vulnerabilities.html')

# API endpoints
@scanner_bp.route('/api/scan/password', methods=['POST'])
def scan_password():
    data = request.get_json()
    password = data.get('password', '')
    
    if not password:
        return jsonify({'error': '–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
    
    result = SecurityScanner.scan_password_strength(password)
    return jsonify(result)

@scanner_bp.route('/api/scan/email', methods=['POST'])
def scan_email():
    data = request.get_json()
    email = data.get('email', '')
    
    if not email or '@' not in email:
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'}), 400
    
    result = SecurityScanner.scan_email_security(email)
    return jsonify(result)

@scanner_bp.route('/api/scan/network', methods=['POST'])
def scan_network():
    data = request.get_json()
    target = data.get('target', '127.0.0.1')
    
    result = SecurityScanner.network_scan(target)
    return jsonify(result)

@scanner_bp.route('/api/scan/quick')
def quick_scan():
    result = SecurityScanner.quick_system_scan()
    return jsonify(result)