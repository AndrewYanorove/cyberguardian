from flask import Blueprint, render_template, jsonify, request
from flask_login import login_required
import random
import time
import re

scanner_bp = Blueprint('scanner', __name__)

class SecurityScanner:
    @staticmethod
    def scan_password_strength(password):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        score = 0
        feedback = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(password) >= 12:
            score += 25
        elif len(password) >= 8:
            score += 15
        else:
            feedback.append("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if re.search(r'[A-Z]', password):
            score += 20
        else:
            feedback.append("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
        
        if re.search(r'[a-z]', password):
            score += 20
        else:
            feedback.append("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
        
        if re.search(r'\d', password):
            score += 20
        else:
            feedback.append("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã")
        
        if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            score += 15
        else:
            feedback.append("üí° –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ common passwords
        common_passwords = ['123456', 'password', 'qwerty', '111111', 'admin']
        if password.lower() in common_passwords:
            score = 0
            feedback = ["üö® –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π!"]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if score >= 80:
            strength = "–û—Ç–ª–∏—á–Ω–∞—è"
            color = "success"
        elif score >= 60:
            strength = "–•–æ—Ä–æ—à–∞—è"
            color = "warning"
        elif score >= 40:
            strength = "–°–ª–∞–±–∞—è"
            color = "danger"
        else:
            strength = "–û—á–µ–Ω—å —Å–ª–∞–±–∞—è"
            color = "dark"
        
        return {
            'score': score,
            'strength': strength,
            'color': color,
            'feedback': feedback,
            'crack_time': SecurityScanner.calculate_crack_time(score)
        }
    
    @staticmethod
    def calculate_crack_time(score):
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞"""
        if score >= 80:
            return "–°–æ—Ç–Ω–∏ –ª–µ—Ç"
        elif score >= 60:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç"
        elif score >= 40:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
        elif score >= 20:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤"
        else:
            return "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
    
    @staticmethod
    def scan_email_security(email):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ email"""
        issues = []
        recommendations = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ (–¥–µ–º–æ)
        leaked_emails = ['test@example.com', 'demo@mail.ru']
        if email in leaked_emails:
            issues.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ —É—Ç–µ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("–°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ email")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
        domain = email.split('@')[-1]
        if domain in ['gmail.com', 'yandex.ru', 'mail.ru']:
            recommendations.append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
        else:
            issues.append("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—á—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        
        return {
            'issues': issues,
            'recommendations': recommendations,
            'score': 80 if not issues else 60
        }
    
    @staticmethod
    def network_scan(target):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ (–¥–µ–º–æ)"""
        time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ports = [
            {'port': 22, 'service': 'SSH', 'status': 'open', 'security': 'medium'},
            {'port': 80, 'service': 'HTTP', 'status': 'open', 'security': 'low'},
            {'port': 443, 'service': 'HTTPS', 'status': 'open', 'security': 'high'},
            {'port': 21, 'service': 'FTP', 'status': 'closed', 'security': 'high'},
            {'port': 3389, 'service': 'RDP', 'status': 'open', 'security': 'critical'}
        ]
        
        vulnerabilities = [
            '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è SSL',
            '–û—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç RDP',
            '–°–ª–∞–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'
        ]
        
        return {
            'ports': ports,
            'vulnerabilities': vulnerabilities,
            'security_score': 65,
            'recommendations': [
                '–ó–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã',
                '–û–±–Ω–æ–≤–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
                '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä'
            ]
        }

@scanner_bp.route('/')
@login_required
def scanner_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–∞–Ω–µ—Ä–∞"""
    return render_template('security_scanner/dashboard.html')

@scanner_bp.route('/password')
@login_required
def password_scanner():
    """–°–∫–∞–Ω–µ—Ä –ø–∞—Ä–æ–ª–µ–π"""
    return render_template('security_scanner/password.html')

@scanner_bp.route('/email')
@login_required
def email_scanner():
    """–°–∫–∞–Ω–µ—Ä email –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return render_template('security_scanner/email.html')

@scanner_bp.route('/network')
@login_required
def network_scanner():
    """–°–∫–∞–Ω–µ—Ä —Å–µ—Ç–∏"""
    return render_template('security_scanner/network.html')

@scanner_bp.route('/vulnerabilities')
@login_required
def vulnerability_scanner():
    """–°–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
    return render_template('security_scanner/vulnerabilities.html')

# API endpoints
@scanner_bp.route('/api/scan/password', methods=['POST'])
def scan_password():
    """API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    data = request.get_json()
    password = data.get('password', '')
    
    if not password:
        return jsonify({'error': '–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
    
    result = SecurityScanner.scan_password_strength(password)
    return jsonify(result)

@scanner_bp.route('/api/scan/email', methods=['POST'])
def scan_email():
    """API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è email"""
    data = request.get_json()
    email = data.get('email', '')
    
    if not email or '@' not in email:
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'}), 400
    
    result = SecurityScanner.scan_email_security(email)
    return jsonify(result)

@scanner_bp.route('/api/scan/network', methods=['POST'])
def scan_network():
    """API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"""
    data = request.get_json()
    target = data.get('target', '192.168.1.1')
    
    result = SecurityScanner.network_scan(target)
    return jsonify(result)

@scanner_bp.route('/api/scan/quick')
def quick_scan():
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    
    return jsonify({
        'system_security': random.randint(60, 95),
        'network_security': random.randint(50, 90),
        'password_security': random.randint(40, 85),
        'threats_found': random.randint(0, 3),
        'recommendations': [
            '–û–±–Ω–æ–≤–∏—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã–µ –±–∞–∑—ã',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞',
            '–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
        ]
    })
